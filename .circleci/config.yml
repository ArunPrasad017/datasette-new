# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0
machine:
  environment:
    SHORT_GIT_HASH: $(echo $CIRCLE_SHA1 | cut -c -7)
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: arundocker017/datasette-new
    docker:
      - image: circleci/buildpack-deps:stretch
parameters:
  run-infra-pipeline:
    type: boolean
    default: True
  run-infra-destroy-pipeline:
    type: boolean
    default: True
jobs:
  pre-commit-check:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run:
          name: Install pre-commit
          command: pip install pre-commit
      - run:
          name: Run pre-commit
          command: pre-commit run --all-files
  build-publish-image:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
         name: Build Docker Image
         command: docker build -t $IMAGE_NAME:latest .
      - run:
          name: Save docker image to local
          command: docker save -o image.tar $IMAGE_NAME
      - run:
          name: Load the saved docker image
          command: docker load -i ./image.tar
      - run:
          name: Publish latest docker image to dockerhub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  run-infra-build:
    working_directory: /tmp/project/
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - when:
          condition: << pipeline.parameters.run-infra-pipeline >>
          steps:
            - run:
                name: terraform init & plan
                command: |
                    cd infra/
                    terraform init -input=false
            - run:
                name: terraform plan
                command: |
                  cd infra/
                  terraform plan -out tfapply -var-file variables.tfvars
            - run:
                name: terraform
                command: |
                  cd infra/
                  terraform apply -auto-approve tfapply
            - persist_to_workspace:
                root: .
                paths:
                  - .
  elb-application-deploy:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          command: echo "Deploying the ElasticBeanstalk application"
      - run:
          command: |
            aws s3 cp docker-compose.yml s3://arun-tf-s3-bucket/<< pipeline.git.branch >>/${CIRCLE_SHA1}/beanstalk/datasette-docker-env/docker-compose.yml
            aws elasticbeanstalk create-application-version --application-name datasette-docker-app \
             --source-bundle S3Bucket="arun-tf-s3-bucket",S3Key="<< pipeline.git.branch >>/${CIRCLE_SHA1}/beanstalk/datasette-docker-env/docker-compose.yml" \
             --version-label "${CIRCLE_SHA1}" --region us-east-1
            aws elasticbeanstalk update-environment --environment-name datasette-docker-env --version-label "${CIRCLE_SHA1}" --region us-east-1
  run-infra-destroy:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - when:
          condition: << pipeline.parameters.run-infra-destroy-pipeline >>
          steps:
            - run:
                name: terraform create destroy plan
                command: |
                  cd infra/
                  terraform plan -destroy -out tfdestroy -var-file variables.tfvars
            - run:
                name: terraform destroy
                command: |
                  cd infra/
                  terraform apply -auto-approve tfdestroy
            - persist_to_workspace:
                root: .
                paths:
                  - .
workflows:
  build-branch:
    jobs:
      - pre-commit-check
      - build-publish-image:
          requires:
            - pre-commit-check
      - run-infra-build:
          requires:
            - build-publish-image
          filters:
            branches:
              only: master
      - elb-application-deploy:
          requires:
            - run-infra-build
          filters:
            branches:
              only: 
                - master
      - run-infra-destroy:
          requires:
            - elb-application-deploy
          filters:
            branches:
              only: 
                - master